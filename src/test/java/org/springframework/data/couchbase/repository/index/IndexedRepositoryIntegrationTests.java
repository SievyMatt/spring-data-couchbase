/*
 * Copyright 2013-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.data.couchbase.repository.index;

import static org.junit.Assert.*;
import static org.springframework.data.couchbase.CouchbaseTestHelper.getRepositoryWithRetry;
import static org.springframework.data.couchbase.core.query.N1QLExpression.x;

import java.util.Arrays;

import com.couchbase.client.java.Cluster;
import com.couchbase.client.java.query.QueryResult;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.couchbase.ContainerResourceRunner;
import org.springframework.data.couchbase.IntegrationTestApplicationConfig;
import org.springframework.data.couchbase.core.CouchbaseOperations;
import org.springframework.data.couchbase.core.query.N1QLQuery;
import org.springframework.data.couchbase.repository.config.RepositoryOperationsMapping;
import org.springframework.data.couchbase.repository.support.CouchbaseRepositoryFactory;
import org.springframework.data.couchbase.repository.support.IndexManager;
import org.springframework.data.repository.core.support.RepositoryFactorySupport;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestExecutionListeners;

/**
 * This tests automatic index creation features in the Couchbase connector.
 * Automatic index creation is performed before construction of the repository implementation.
 *
 * @author Simon Basl√©
 */
@RunWith(ContainerResourceRunner.class)
@ContextConfiguration(classes = IntegrationTestApplicationConfig.class)
@TestExecutionListeners(IndexedRepositoryTestListener.class)
public class IndexedRepositoryIntegrationTests {

  public static final String SECONDARY = "autogeneratedIndexIndexedUserN1qlSecondary";
  public static final String VIEW_DOC = "autogeneratedIndex";
  public static final String VIEW_NAME = "IndexedUserView";

  public static final String IGNORED_VIEW_NAME = "AnotherIndexedUserView";
  public static final String IGNORED_SECONDARY = "AnotherIndexedUserN1qlSecondary";

  @Autowired
  private RepositoryOperationsMapping operationsMapping;

  @Autowired
  private Cluster cluster;

  @Autowired
  private IndexManager indexManager;

  private CouchbaseOperations template;
  private RepositoryFactorySupport factory;

  private RepositoryFactorySupport ignoringIndexFactory;
  private IndexManager ignoringIndexManager = new IndexManager(cluster, false, false);

  @Before
  public void setup() throws Exception {
    factory = new CouchbaseRepositoryFactory(operationsMapping, indexManager);
    template = operationsMapping.getDefault();
    ignoringIndexFactory = new CouchbaseRepositoryFactory(operationsMapping, ignoringIndexManager);
  }

  @Test
  public void shouldFindN1qlPrimaryIndex() {
    IndexedUserRepository repository = getRepositoryWithRetry(factory, IndexedUserRepository.class);

    String bucket = template.getCouchbaseBucket().name();
    N1QLQuery existQuery = new N1QLQuery(x("SELECT 1 FROM `"+ bucket +"`"));
    QueryResult result = template.queryN1QL(existQuery);
    assertNotNull(result);
  }

  @Test
  public void shouldFindN1qlSecondaryIndex() {
    IndexedUserRepository repository = getRepositoryWithRetry(factory, IndexedUserRepository.class);

    String bucket = template.getCouchbaseBucket().name();
    N1QLQuery existQuery = new N1QLQuery(x("SELECT 1 FROM `"+ bucket +"` USE INDEX (" +  SECONDARY +")"));
    QueryResult exist = template.queryN1QL(existQuery);

    assertNotNull(exist);
  }

  @Test
  public void shouldNotFindN1qlSecondaryIndexWithIgnoringIndexManager() {
    AnotherIndexedUserRepository repository = getRepositoryWithRetry(ignoringIndexFactory, AnotherIndexedUserRepository.class);

    String bucket = template.getCouchbaseBucket().name();
    N1QLQuery existQuery = new N1QLQuery(x("SELECT 1 FROM `"+ bucket +"` USE INDEX (" +  IGNORED_SECONDARY +")"));
    QueryResult exist = template.queryN1QL(existQuery);

    assertNotNull(exist);
  }
}
